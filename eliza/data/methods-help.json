{"1":{"id":1,"module_id":1,"name":"click($link)","short_name":"click","params":"<ul><li>string $link - clicked link text.</li></ul>","description":"Allows to emulate user's click on link or submit form. Results of this action - response of POST or GET request to specify page.","example":"$I->click('Login');"},"2":{"id":2,"module_id":1,"name":"go($link)","short_name":"go","params":"<ul><li>string $link - clicked link text.</li></ul>","description":"Allows to emulate user's opening specify page. Results of this action - response of GET request to specify page. Param \"/\" according to the site main page.","example":"$I->go('/');"},"3":{"id":3,"module_id":1,"name":"want($description)","short_name":"want","params":"<ul><li>string $description - text of test description.</li></ul>","description":"Allows to add comments before test execution. It helps describe what test do.","example":"$I->want('Check Authorization');"},"4":{"id":4,"module_id":1,"name":"fill($fields)","short_name":"fill","params":"<ul><li>array $fields - pairs field-value where field - name or id of form's input or textarea field, value - field value.</li></ul>","description":"Allows to fill forms inputs and textareas on web page.","example":"$I->fill(array('login'=>'demo'));"},"5":{"id":5,"module_id":1,"name":"select($fields)","short_name":"select","params":"<ul><li>array $fields - pairs field-value where field - name or id of form's select field, value - selected value.</li></ul>","description":"Allows to set values for forms selects on web page.","example":"$I->select(array('City'=>'London'));"},"6":{"id":6,"module_id":1,"name":"see($text, $selector)","short_name":"see","params":"<ul><li>string $text - message on web page that should show to user.</li><li>string $selector (optional) - id or class selector that specify area for searching message.</li></ul>","description":"Allows to check existing of message on web page.","example":"$I->see('Congratulation!','#message-area');"},"7":{"id":7,"module_id":1,"name":"notSee($text, $selector)","short_name":"notSee","params":"<ul><li>string $text - message on web page that shouldn't show to user.</li><li>string $selector (optional) - id or class selector that specify area for searching message.</li></ul>","description":"Allows to check absence of message on web page.","example":"$I->notSee('Failed!','#message-area');"},"8":{"id":8,"module_id":1,"name":"submit($formKey)","short_name":"submit","params":"<ul><li>string $formKey - name or id of specify form.</li></ul>","description":"Allows to submit form on web page. More prefferable use for this purpose method click().But if you haven't submit button you can submit form just by this method.","example":"$I->submit('LoginForm');"},"9":{"id":9,"module_id":1,"name":"addTest($testName)","short_name":"addTest","params":"<ul><li>string $testName - name of included test.</li></ul>","description":"Allows to include test in current test. For example, if you need be logined for the test successful execution, you may include login test to current test.","example":"$I->addTest('loginTest');"},"10":{"id":10,"module_id":1,"name":"newTest($testName)","short_name":"newTest","params":"<ul><li>string $testName - name of new test.</li></ul>","description":"Allows to start new test within current test. For example, if you need to write few tests in one test, you can do this by calling this method.","example":"$I->newTest('searchTest');"},"11":{"id":11,"module_id":6,"name":"seeInDb($table,$fields)","short_name":"seeInDb","params":"<ul><li>string $table - table searched for tested values.</li></li>array $fileds - pairs field-value for comparation.</li></ul>","description":"Allows to compare data stored in project database with expected data.","example":"$I->seeInDb('users',array('login'=>'demo','password'=>'nsfg549hj'));"},"12":{"id":12,"module_id":3,"name":"checkErrors()","short_name":"checkError","params":"no params","description":"Return error when PHP or SQL warnings or errors will be shown  on display.","example":"$I->checkErrors();"},"13":{"id":13,"module_id":2,"name":"assertTrue($condition)","short_name":"assertTrue","params":"<ul><li>bool $condition Compared condition.</li></ul>","description":"Mark test as incomplete if $condition not true.","example":"$testClass = new TestClass();\n$testClass->error = true;\n$this->assertTrue($testClass->getError());"},"14":{"id":14,"module_id":2,"name":"assertFalse($condition)","short_name":"assertFalse","params":"<ul><li>bool $condition Compared condition.</li></ul>","description":"Mark test as incomplete if $condition not false.","example":"$testClass = new TestClass();\n$testClass->error = false;\n$this->assertFalse($testClass->getError());"},"15":{"id":15,"module_id":2,"name":"assertEquals($expected, $actual)","short_name":"assertEquals","params":"<ul><li>mixed $expected Expected value</li><li>mixed $actual Compared value</li></ul>","description":"Mark test as incomplete if $actual value not equal $expected value","example":"$testClass = new TestClass();\n$testClass->count = 2;\n$this->assertEquals(2, $testClass->getCount());"},"16":{"id":16,"module_id":2,"name":"assertFileExists($filename)","short_name":"assertFileExists","params":"<ul><li>string $filename Checked file</li></ul>","description":"Mark test as incomplete if file $filename not exists","example":"$testClass = new TestClass();\n$filename = PROJECT_ROOT.'/public/errors.log';\n$testClass->saveLog();\n$this->assertFileExists($filename);"},"17":{"id":17,"module_id":2,"name":"assertEmpty($actual)","short_name":"assertEmpty","params":"<ul><li>mixed $actual Compared value</li></ul>","description":"Mark test as incomplete if $actual value is not empty.","example":"$testClass = new TestClass();\n$testClass->property = '';\n$this->assertEmpty($testClass->getProperty());"},"18":{"id":18,"module_id":2,"name":"assertNotEmpty($actual)","short_name":"assertNotEmpty","params":"<ul><li>mixed $actual Compared value</li></ul>","description":"Mark test as incomplete if $actual value is empty.","example":"$testClass = new TestClass();\n$testClass->property = 'Eliza';\n$this->assertNotEmpty($testClass->getProperty());"},"19":{"id":19,"module_id":2,"name":"assertNull($actual)","short_name":"assertNull","params":"<ul><li>mixed $actual Compared value</li></ul>","description":"Mark test as incomplete if $actual value is not null","example":"$testClass = new TestClass();\n$testClass->property = null;\n$this->assertNull($testClass->getProperty());"},"20":{"id":20,"module_id":2,"name":"assertNotNull($actual)","short_name":"assertNotNull","params":"<ul><li>mixed $actual Compared value</li></ul>","description":"Mark test as incomplete if $actual value is null","example":"$testClass = new TestClass();\n$testClass->property = 'Not null value';\n$this->assertNotNull($testClass->getProperty());"}}